// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.2.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace UserGro.Tests.Behavior
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Privacy")]
    public partial class PrivacyFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UserPrivacy.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Privacy", "In order to maintain my privacy\r\nAs a site user\r\nI want to control who can see my" +
                    " profile", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Privacy respected")]
        public virtual void PrivacyRespected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Privacy respected", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("I am a user that allows friends only to view page");
#line 8
testRunner.When("a nonfriend requests my information");
#line 9
testRunner.Then("only basic information is returned");
#line 11
testRunner.Given("I am a user that allows friends only to view page");
#line 12
testRunner.When("a friend requests my information");
#line 13
testRunner.Then("my full profile information is displayed");
#line 15
testRunner.Given("I am a user that requires authentication to be my friend");
#line 16
testRunner.When("a user requests to be my friend");
#line 17
testRunner.Then("they are added to awaiting approval");
#line 18
testRunner.And("not added to friends");
#line 20
testRunner.Given("I am a user that requires authentication to be my friend");
#line 21
testRunner.When("a friend requests to be my friend");
#line 22
testRunner.Then("they are not added to my friends list twice");
#line 24
testRunner.Given("I am a user that does NOT require authentication to be my friend");
#line 25
testRunner.When("a user requests to be my friend");
#line 26
testRunner.Then("they are added to my friends list");
#line 27
testRunner.And("I am added to their friend list");
#line 29
testRunner.Given("I am a user that does NOT require authentication to be my friend");
#line 30
testRunner.When("a friend requests to be my friend");
#line 31
testRunner.Then("they are not added to my friends list twice");
#line 33
testRunner.Given("I am a user that has a friend in my awaiting confirmation list");
#line 34
testRunner.When("I approve the friend");
#line 35
testRunner.Then("the friend is added to my friends list");
#line 36
testRunner.And("is no longer in my awaiting confirmation list");
#line 37
testRunner.And("I am in their friends list");
#line 39
testRunner.Given("I am a user that has a friend in my awaiting confirmation list");
#line 40
testRunner.And("the user is somehow in my friend list");
#line 41
testRunner.When("I approve the friend");
#line 42
testRunner.Then("the friend is still only in my friends list once");
#line 43
testRunner.And("is no longer in my awaiting confirmation list");
#line 44
testRunner.And("I am in their friends list");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
