// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.2.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace UserGro.Tests.Behavior
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("In order to manage nearby groups / events")]
    public partial class InOrderToManageNearbyGroupsEventsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "User.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "In order to manage nearby groups / events", "As a programmer\r\nI want to see everything available", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Privacy respected")]
        public virtual void PrivacyRespected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Privacy respected", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
testRunner.Given("I am a user that allows friends only to view page");
#line 7
testRunner.When("a nonfriend requests my information");
#line 8
testRunner.Then("only basic information is returned");
#line 10
testRunner.Given("I am a user that allows friends only to view page");
#line 11
testRunner.When("a friend requests my information");
#line 12
testRunner.Then("my full profile information is displayed");
#line 14
testRunner.Given("I am a user that requires authentication to be my friend");
#line 15
testRunner.When("a user requests to be my friend");
#line 16
testRunner.Then("they are added to awaiting approval");
#line 17
testRunner.And("not added to friends");
#line 19
testRunner.Given("I am a user that requires authentication to be my friend");
#line 20
testRunner.When("a friend requests to be my friend");
#line 21
testRunner.Then("nothing happens");
#line 23
testRunner.Given("I am a user that does NOT require authentication to be my friend");
#line 24
testRunner.When("a user requests to be my friend");
#line 25
testRunner.Then("they are added to my friends list");
#line 27
testRunner.Given("I am a user that does NOT require authentication to be my friend");
#line 28
testRunner.When("a user requests to be my friend");
#line 29
testRunner.Then("nothing happens");
#line 31
testRunner.Given("I am a user that is not part of the local .NET group");
#line 32
testRunner.When("I attempt to join the group");
#line 33
testRunner.And("the group does not require approval");
#line 34
testRunner.Then("it is added to my groups");
#line 36
testRunner.Given("I am a user that is not part of the local .NET group");
#line 37
testRunner.When("I attempt to join the group");
#line 38
testRunner.And("the group DOES require approval");
#line 39
testRunner.Then("I am added to the groups Awaiting approval");
#line 41
testRunner.Given("I am a user that wants to attend a local day of .NET");
#line 42
testRunner.When("I attempt to register for the event");
#line 43
testRunner.And("there is still room to join the event");
#line 44
testRunner.Then("I am added to the event\'s attendee\'s");
#line 45
testRunner.And("the event is added to my EventsAttending");
#line 47
testRunner.Given("I am a user that wants to start an event");
#line 48
testRunner.When("I create an event");
#line 49
testRunner.Then("it gets added to my events admin");
#line 50
testRunner.And("it gets added to my events attending");
#line 52
testRunner.Given("I am a user that is an event admin");
#line 53
testRunner.When("I remove an attendee");
#line 54
testRunner.Then("they are no longer in the list of those coming");
#line 56
testRunner.Given("I am a user that is an event admin");
#line 57
testRunner.When("I promote another user to admin the event");
#line 58
testRunner.Then("they are promoted to admin");
#line 60
testRunner.Given("I am a user logged into the system");
#line 61
testRunner.When("I send a message to another user");
#line 62
testRunner.And("I am not their friend");
#line 63
testRunner.And("they allow messages to be sent to them from nonfriends");
#line 64
testRunner.Then("my message is in their inbox");
#line 66
testRunner.Given("I am a user logged into the system");
#line 67
testRunner.When("I send a message to another user");
#line 68
testRunner.And("I am not their friend");
#line 69
testRunner.And("they do NOT allow messages to be sent to them from nonfriends");
#line 70
testRunner.Then("my message is NOT in their inbox");
#line 72
testRunner.Given("I am a user logged into the system");
#line 73
testRunner.When("I send a message to another user");
#line 74
testRunner.And("the user is my friend");
#line 75
testRunner.Then("my message is in their inbox");
#line 77
testRunner.Given("I am a user logged into the system");
#line 78
testRunner.When("I send a message to a non-existant user");
#line 79
testRunner.Then("I receive an exception");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Account administration")]
        public virtual void AccountAdministration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Account administration", ((string[])(null)));
#line 81
this.ScenarioSetup(scenarioInfo);
#line 83
testRunner.Given("I am a potential user");
#line 84
testRunner.When("I sign up for an account that is available");
#line 85
testRunner.Then("it is given to me");
#line 87
testRunner.Given("I am a potential user");
#line 88
testRunner.When("I sign up for an account that is not available");
#line 89
testRunner.Then("it will not allow me to have that account");
#line 91
testRunner.Given("I am an existing user");
#line 92
testRunner.And("I change my email address");
#line 93
testRunner.And("the email address is not associated with another account");
#line 94
testRunner.Then("the change is set in the system");
#line 96
testRunner.Given("I am an existing user");
#line 97
testRunner.And("I change my email address");
#line 98
testRunner.And("the email address is associated with another user");
#line 99
testRunner.Then("no change is made");
#line 100
testRunner.And("an exception is thrown");
#line 102
testRunner.Given("I am an existing user");
#line 103
testRunner.And("I change my RequiresApprovalToBeFriends");
#line 104
testRunner.Then("the change is set in the system");
#line 106
testRunner.Given("I am an existing user");
#line 107
testRunner.And("I change my profile to be visible to friends only");
#line 108
testRunner.Then("the change is set in the system");
#line 110
testRunner.Given("I am an existing user");
#line 111
testRunner.And("I change my profile to allow messages from non-friends");
#line 112
testRunner.Then("the change is set in the system");
#line 114
testRunner.Given("I am an existing user");
#line 115
testRunner.And("I change my profile name");
#line 116
testRunner.Then("the change is set in the system");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
