// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.2.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace UserGro.Tests.Behavior
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Join Event")]
    public partial class JoinEventFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UserJoinEvent.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Join Event", "In order to attend events\r\nAs a user\r\nI want to register for events", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User join event")]
        public virtual void UserJoinEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User join event", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("I want to go to the MAGIC SHOW event");
#line 8
testRunner.And("the event is not moderated");
#line 9
testRunner.And("there is no room left");
#line 10
testRunner.When("I attempt to register for the event");
#line 11
testRunner.Then("I am NOT added to the event\'s attendees");
#line 12
testRunner.And("the event is NOT added to my EventsAttending");
#line 14
testRunner.Given("I want to go to the MAGIC SHOW event");
#line 15
testRunner.And("the event is not moderated");
#line 16
testRunner.And("there is room left");
#line 17
testRunner.When("I attempt to register for the event");
#line 18
testRunner.Then("I am added to the event\'s attendees");
#line 19
testRunner.And("the event is added to my EventsAttending");
#line 21
testRunner.Given("I want to go to the MAGIC SHOW event");
#line 22
testRunner.And("the event is moderated");
#line 23
testRunner.And("there is no room left");
#line 24
testRunner.When("I attempt to register for the event");
#line 25
testRunner.Then("I am NOT added to the event\'s attendees");
#line 26
testRunner.And("the event is NOT added to my EventsAttending");
#line 28
testRunner.Given("I want to go to the MAGIC SHOW event");
#line 29
testRunner.And("the event is moderated");
#line 30
testRunner.And("there is room left");
#line 31
testRunner.When("I attempt to register for the event");
#line 32
testRunner.Then("I am added to the event\'s awaiting approval");
#line 33
testRunner.And("the event is NOT added to my EventsAttending");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
